# generated by datamodel-codegen:
#   filename:  nimads.yml
#   timestamp: 2019-07-26T00:00:00+00:00

from __future__ import annotations

from datetime import datetime
from typing import Any, Dict, List, Optional, Union

from pydantic import AnyUrl, Field

from custom_module import Base


class StudysetBase(Base):
    name: Optional[str] = Field(
        None, description='Descriptive and human readable name of the studyset.'
    )
    description: Optional[str] = Field(
        None, description='A longform description of the studyset.'
    )
    publication: Optional[str] = Field(
        None,
        description='The journal/source the studyset is connected to if the studyset was published.',
    )
    doi: Optional[str] = Field(
        None,
        description='A DOI connected to the published studyset (may change to being automatically created so each studyset connected to a successful meta-analysis gets a DOI).',
    )
    pmid: Optional[str] = Field(
        None,
        description='If the article connected to the studyset was published on PubMed, then link the ID here.',
    )


class AnnotationBase(Base):
    name: Optional[str] = Field(
        None, description='Descriptive name for the annotation.'
    )
    description: Optional[str] = Field(
        None, description='Long form description of the annotation.'
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='object describing metadata about the annotation, such as software used or descriptions of the keys used in the annotation.',
    )
    note_keys: Optional[Dict[str, Any]] = Field(
        None,
        description="The keys (columns) in the annotation and the key's respective type.",
        example={'include': 'boolean'},
    )


class NoteCollectionBase(Base):
    note: Optional[Dict[str, Any]] = Field(
        None,
        description='The note will contain all note_keys as keys and have a value of either null or the value type specified in note_keys.',
    )


class StudyBase(Base):
    doi: Optional[str] = Field(
        None,
        description='Digital object identifier of the study.',
        example='10.1016/S0926-6410(97)00020-7',
    )
    name: Optional[str] = Field(
        None,
        description='Title of the study.',
        example='Functional magnetic resonance imaging of category-specific cortical activation: evidence for semantic maps.',
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='Metadata associated with the study not covered by the other study attributes.',
    )
    description: Optional[str] = Field(
        None,
        description='Long form description of the study, typically the abstract.',
        example='This is my very scientific abstract.',
    )
    publication: Optional[str] = Field(
        None,
        description='The journal/place of publication for the study.',
        example='Journal of Super Important Science.',
    )
    pmid: Optional[str] = Field(
        None,
        description='If the study was published on PubMed, place the PubMed ID here.',
    )
    authors: Optional[str] = Field(
        None, description='The authors on the publication of this study.'
    )
    year: Optional[int] = Field(None, description='The year this study was published.')


class AnalysisBase(Base):
    name: Optional[str] = Field(
        None,
        description='A name of the contrast being performed.',
        example='"houses>faces"',
    )
    description: Optional[str] = Field(
        None, description='A long form description of how the contrast was performed'
    )
    weights: Optional[List[float]] = Field(
        None,
        description='Weight applied to each condition, must be the same length as the conditions attribute.',
    )


class ImageBase(Base):
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='Metadata about image such as software and version used and other relevant data about how the image was produced.',
    )
    url: Optional[AnyUrl] = Field(
        None,
        description='URL to image file.',
        example='https://neurovault.org/media/images/4778/Positive_RPEs_zstat.nii.gz',
    )
    filename: Optional[str] = Field(
        None,
        description='Name of the image file.',
        example='Positive_RPEs_zstat.nii.gz',
    )
    space: Optional[str] = Field(
        None,
        description='The template space the image is in (e.g., MNI ',
        example='MNI152NLin2009aAsym',
    )
    value_type: Optional[str] = Field(
        None,
        description='The values the image represents. For example, T-statistic or Z-statistic, or Betas.',
        example='Z',
    )
    add_date: Optional[datetime] = Field(None, description='Date the image was added.')


class PointBase(Base):
    coordinates: Optional[List[float]] = Field(
        None,
        description='Location of the significant coordinate in three dimensional space.',
        max_items=3,
        min_items=3,
    )
    space: Optional[str] = Field(
        None,
        description='Template space used to determine coordinate Examples include TAL or MNI.',
        example='MNI',
    )
    kind: Optional[str] = Field(
        None, description='Method of how point was derived (e.g., center of mass)'
    )
    label_id: Optional[str] = Field(
        None,
        description='If the point is associated with an image, this is the value the point takes in that image.',
    )


class PointValue(Base):
    kind: Optional[str] = Field(
        None,
        description='The kind of statistic the value represents, whether it is variance, beta, t-statistic, or z-statistic.',
    )
    value: Optional[float] = Field(
        None, description='The value of the point for the "kind" of statistic.'
    )


class ConditionBase(Base):
    name: Optional[str] = Field(
        None,
        description='Name of the condition being applied in the contrast, either psychological, pharmacological, or group based.',
    )
    description: Optional[str] = Field(
        None,
        description='Long form description of how the condition is operationalized and/or specific meaning.',
    )


class Condition(ConditionBase):
    pass


class StudysetRelationships(Base):
    studies: Optional[List[Union[Study, str]]] = Field(
        None, description='The collection of studies.'
    )


class AnnotationRelationships(Base):
    studyset: Optional[Union[Studyset, str]] = Field(
        None,
        description='The studyset the annotation is associated with. Each annotation is associated with one and only one studyset, but a studyset can have multiple annotations. The representation can either be a studyset object or a string indicating the location to find the studyset object.',
    )
    notes: Optional[List[NoteCollection]] = Field(
        None,
        description='The collection of notes for each analysis within the studyset. Each analysis will have all note_keys with the appropriately typed values.',
    )


class NoteCollectionRelationships(Base):
    analysis: Optional[Union[Analysis, str]] = Field(
        None,
        description='The analysis the note collection is associated with. Either represented as an analysis object or a string pointing to the location of the analysis object.',
    )
    annotation: Optional[Union[Annotation, str]] = Field(
        None,
        description='The annotation this collection of notes is associated with. Either represented as an annotation object or a string pointing to the location of the annotation object.',
    )


class StudyRelationships(Base):
    analyses: Optional[List[Union[Analysis, str]]] = Field(
        None,
        description='The analyses making up the study. A study can have one or more analyses, since each analysis represents a contrast of conditions, where psychological, behavioral, pharmacological, or group based. Either represented as an analysis object or a string pointing to the location of the analysis object.',
    )


class AnalysisRelationships(Base):
    conditions: Optional[List[Union[Condition, str]]] = Field(
        None,
        description='Array of conditions (e.g., 2-back, memory, etc.) that must be the same length as the weights attribute. Either is an array of condition objects or strings that point to condition objects.',
    )
    images: Optional[List[Union[Image, str]]] = Field(
        None,
        description='Statistical images (e.g., beta, t-statistic, and/or z-statistic images) where each voxel gets a value. Either represented as an array of image objects or strings linking to image objects.',
    )
    points: Optional[List[Union[Point, str]]] = Field(
        None,
        description='Coordinates of significance associated with the contrast. Either an array of point objects or an array of strings linking to point objects.',
    )
    study: Optional[Union[Study, str]] = Field(
        None,
        description='The study this analysis is associated with. Each analysis can only be associated to one and only one study, but a study can have multiple analyses.',
    )


class ImageRelationships(Base):
    analysis: Optional[Union[Analysis, str]] = Field(
        None,
        description='Analysis the image is associated with. Each image is associated with one and only one analysis, but an analysis can have multiple images. Either an analysis object or a string linking to an analysis object.',
    )


class PointRelationships(Base):
    image: Optional[Union[Image, Dict[str, Any]]] = Field(
        None,
        description='Statistical image the point was derived from. Either points to an image object or a string linking to an image object.',
    )
    value: Optional[List[PointValue]] = Field(
        None,
        description='An array of values at this point since each value could represent a beta, t-statistic and/or z-statistic, etc.',
    )
    analysis: Optional[Union[Analysis, Dict[str, Any]]] = Field(
        None,
        description='Analysis the point is associated with. Each point is associated with one and only one analysis, but an analysis can have multiple points. Either an analysis object or a string linking to an analysis object.',
    )


class Studyset(StudysetBase, StudysetRelationships):
    pass


class Annotation(AnnotationBase, AnnotationRelationships):
    pass


class NoteCollection(NoteCollectionBase, NoteCollectionRelationships):
    pass


class Study(StudyBase, StudyRelationships):
    pass


class Analysis(AnalysisBase, AnalysisRelationships):
    pass


class Image(ImageBase, ImageRelationships):
    pass


class Point(PointBase, PointRelationships):
    pass


StudysetRelationships.update_forward_refs()
AnnotationRelationships.update_forward_refs()
NoteCollectionRelationships.update_forward_refs()
StudyRelationships.update_forward_refs()
AnalysisRelationships.update_forward_refs()
ImageRelationships.update_forward_refs()
PointRelationships.update_forward_refs()
Studyset.update_forward_refs()
Annotation.update_forward_refs()
NoteCollection.update_forward_refs()
Study.update_forward_refs()
Analysis.update_forward_refs()
Image.update_forward_refs()
Point.update_forward_refs()
